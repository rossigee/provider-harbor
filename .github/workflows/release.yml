# Standardized Release Template for Crossplane Providers
# Version: 2025-10-01 - Updated for Go 1.25.1
#
# This template handles ALL publishing for releases
# - Only runs on version tag creation to avoid conflicts with CI
# - Builds from source and publishes to primary registry
# - Creates GitHub release with auto-generated notes
# - Single source of truth for version and latest tags

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.25.1'

jobs:
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Vendor Dependencies
        run: go mod vendor

      - name: Determine Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version determined: ${VERSION}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Publish
        run: |
          echo "Building and publishing provider-harbor ${{ steps.version.outputs.VERSION }}"

          # Build and publish all platforms and registries
          make publish \
            VERSION=${{ steps.version.outputs.VERSION }} \
            PLATFORMS="linux_amd64,linux_arm64"

          echo "âœ… Successfully published provider-harbor ${{ steps.version.outputs.VERSION }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            # provider-harbor ${{ steps.version.outputs.VERSION }}

            ## ðŸŽ¯ V2 Native Provider Features
            - **Namespaced Resources**: Full v2 support with `.m.crossplane.io` API groups
            - **Dual Scope Support**: Both cluster-scoped (v1alpha1) and namespaced (v1beta1) APIs
            - **Native Performance**: Direct Harbor Go client integration (~5-10MB memory)
            - **Production Ready**: Comprehensive Harbor API coverage

            ## ðŸ“¦ Container Images
            - **Primary**: `ghcr.io/rossigee/provider-harbor:${{ steps.version.outputs.VERSION }}`
            - **Latest**: `ghcr.io/rossigee/provider-harbor:latest`

            ## ðŸš€ Installation
            ```bash
            kubectl crossplane install provider ghcr.io/rossigee/provider-harbor:${{ steps.version.outputs.VERSION }}
            ```

            ## ðŸ“‹ Supported Resources
            ### V2 Namespaced (Recommended)
            - `project.harbor.m.crossplane.io/v1beta1` - Project management
            - `scanner.harbor.m.crossplane.io/v1beta1` - Scanner registration
            - `harbor.m.crossplane.io/v1beta1` - Provider configuration

            ### V1 Cluster-Scoped (Legacy)
            - `project.harbor.crossplane.io/v1alpha1` - Legacy project management
            - `scanner.harbor.crossplane.io/v1alpha1` - Legacy scanner registration
            - `user.harbor.crossplane.io/v1alpha1` - User management
            - `registry.harbor.crossplane.io/v1alpha1` - Registry management

            ## ðŸ”„ Migration Guide
            For migration from v1alpha1 to v1beta1 APIs, see the [Migration Guide](https://github.com/rossigee/provider-harbor/blob/master/MIGRATION.md).
          draft: false
          prerelease: false

# Key Principles for this Template:
#
# 1. SINGLE SOURCE OF TRUTH
#    - Only this workflow publishes to registries
#    - Eliminates tag conflicts with CI workflow
#    - Both version and latest tags point to same image
#
# 2. MULTI-PLATFORM SUPPORT
#    - Builds for linux_amd64 and linux_arm64
#    - Consistent across all target platforms
#
# 3. PRIMARY REGISTRY FOCUS
#    - ghcr.io/rossigee as single source of truth
#    - Optional additional registries via environment
#
# 4. AUTOMATED RELEASE NOTES
#    - Generated from template with version info
#    - Includes installation and migration guidance
#    - Lists all supported API versions
#
# 5. VERSION FLEXIBILITY
#    - Supports both tag push and manual dispatch
#    - Manual dispatch allows hotfix releases