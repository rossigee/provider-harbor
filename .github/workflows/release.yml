name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24.5'
  DOCKER_BUILDX_VERSION: 'v0.11.2'

jobs:
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Cache
        id: go
        run: echo "cache=$(make go.cachedir)" >> $GITHUB_OUTPUT

      - name: Cache the Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-release-${{ hashFiles('**/go.sum') }}

      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Install Crossplane CLI
        run: |
          mkdir -p .cache/tools/linux_x86_64
          curl -fsSLo .cache/tools/linux_x86_64/crossplane-cli-v1.20.0 --create-dirs https://releases.crossplane.io/stable/v1.20.0/bin/linux_amd64/crank?source=build
          chmod +x .cache/tools/linux_x86_64/crossplane-cli-v1.20.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build Artifacts
        run: |
          make build.all VERSION=${{ steps.version.outputs.version }}
        env:
          BUILD_ARGS: "--load"

      - name: Tag and Push Docker Image
        run: |
          # List all images to debug
          echo "Available Docker images:"
          docker images
          
          # Find the built image name (looking for build-* pattern)
          BUILT_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep build-.*/provider-harbor | head -1)
          echo "Built image: $BUILT_IMAGE"
          
          if [ -z "$BUILT_IMAGE" ]; then
            echo "Error: No built image found"
            echo "Available images:"
            docker images
            exit 1
          fi
          
          docker tag $BUILT_IMAGE ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker tag $BUILT_IMAGE ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Simple changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.txt
            git log --oneline --no-merges $PREVIOUS_TAG..HEAD >> changelog.txt
          else
            echo "## Initial Release" > changelog.txt
            echo "First release of provider-harbor v${{ steps.version.outputs.version }}" >> changelog.txt
          fi
          
          echo "## Installation" >> changelog.txt
          echo '```bash' >> changelog.txt
          echo "kubectl crossplane install provider ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}" >> changelog.txt
          echo '```' >> changelog.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: changelog.txt
          files: |
            _output/bin/*
            _output/xpkg/*.xpkg
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Package to GHCR
        if: "!contains(steps.version.outputs.version, '-')"
        run: |
          echo "Uploading Crossplane package to GHCR..."
          make xpkg.push PACKAGE_REGISTRY=ghcr.io/${{ github.repository_owner }} VERSION=${{ steps.version.outputs.version }}

      - name: Release Summary
        run: |
          echo "ðŸŽ‰ Provider Harbor ${{ steps.version.outputs.version }} has been released!"
          echo "ðŸ“¦ Docker: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}"
          echo "ðŸ“¦ Package: ghcr.io/${{ github.repository_owner }}/provider-harbor:${{ steps.version.outputs.version }}"
          echo "ðŸ“¦ Install: kubectl crossplane install provider ghcr.io/${{ github.repository_owner }}/provider-harbor:${{ steps.version.outputs.version }}"