/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FiltersInitParameters struct {
	Decoration *string `json:"decoration,omitempty" tf:"decoration,omitempty"`

	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type FiltersObservation struct {
	Decoration *string `json:"decoration,omitempty" tf:"decoration,omitempty"`

	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type FiltersParameters struct {

	// +kubebuilder:validation:Optional
	Decoration *string `json:"decoration,omitempty" tf:"decoration,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ReplicationInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	CopyByChunk *bool `json:"copyByChunk,omitempty" tf:"copy_by_chunk,omitempty"`

	Deletion *bool `json:"deletion,omitempty" tf:"deletion,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DestNamespace *string `json:"destNamespace,omitempty" tf:"dest_namespace,omitempty"`

	DestNamespaceReplace *float64 `json:"destNamespaceReplace,omitempty" tf:"dest_namespace_replace,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExecuteOnChanged *bool `json:"executeOnChanged,omitempty" tf:"execute_on_changed,omitempty"`

	Filters []FiltersInitParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Override *bool `json:"override,omitempty" tf:"override,omitempty"`

	// +crossplane:generate:reference:type=github.com/rossigee/provider-harbor/apis/registry/v1alpha1.Registry
	// +crossplane:generate:reference:extractor=github.com/rossigee/provider-harbor/config/common.ExtractRegistryID()
	RegistryID *float64 `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Reference to a Registry in registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDRef *v1.Reference `json:"registryIdRef,omitempty" tf:"-"`

	// Selector for a Registry in registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDSelector *v1.Selector `json:"registryIdSelector,omitempty" tf:"-"`

	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`
}

type ReplicationObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	CopyByChunk *bool `json:"copyByChunk,omitempty" tf:"copy_by_chunk,omitempty"`

	Deletion *bool `json:"deletion,omitempty" tf:"deletion,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DestNamespace *string `json:"destNamespace,omitempty" tf:"dest_namespace,omitempty"`

	DestNamespaceReplace *float64 `json:"destNamespaceReplace,omitempty" tf:"dest_namespace_replace,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExecuteOnChanged *bool `json:"executeOnChanged,omitempty" tf:"execute_on_changed,omitempty"`

	Filters []FiltersObservation `json:"filters,omitempty" tf:"filters,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Override *bool `json:"override,omitempty" tf:"override,omitempty"`

	RegistryID *float64 `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	ReplicationPolicyID *float64 `json:"replicationPolicyId,omitempty" tf:"replication_policy_id,omitempty"`

	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`
}

type ReplicationParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	CopyByChunk *bool `json:"copyByChunk,omitempty" tf:"copy_by_chunk,omitempty"`

	// +kubebuilder:validation:Optional
	Deletion *bool `json:"deletion,omitempty" tf:"deletion,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DestNamespace *string `json:"destNamespace,omitempty" tf:"dest_namespace,omitempty"`

	// +kubebuilder:validation:Optional
	DestNamespaceReplace *float64 `json:"destNamespaceReplace,omitempty" tf:"dest_namespace_replace,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExecuteOnChanged *bool `json:"executeOnChanged,omitempty" tf:"execute_on_changed,omitempty"`

	// +kubebuilder:validation:Optional
	Filters []FiltersParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Override *bool `json:"override,omitempty" tf:"override,omitempty"`

	// +crossplane:generate:reference:type=github.com/rossigee/provider-harbor/apis/registry/v1alpha1.Registry
	// +crossplane:generate:reference:extractor=github.com/rossigee/provider-harbor/config/common.ExtractRegistryID()
	// +kubebuilder:validation:Optional
	RegistryID *float64 `json:"registryId,omitempty" tf:"registry_id,omitempty"`

	// Reference to a Registry in registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDRef *v1.Reference `json:"registryIdRef,omitempty" tf:"-"`

	// Selector for a Registry in registry to populate registryId.
	// +kubebuilder:validation:Optional
	RegistryIDSelector *v1.Selector `json:"registryIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`
}

// ReplicationSpec defines the desired state of Replication
type ReplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReplicationInitParameters `json:"initProvider,omitempty"`
}

// ReplicationStatus defines the observed state of Replication.
type ReplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Replication is the Schema for the Replications API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type Replication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ReplicationSpec   `json:"spec"`
	Status ReplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicationList contains a list of Replications
type ReplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Replication `json:"items"`
}

// Repository type metadata.
var (
	Replication_Kind             = "Replication"
	Replication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Replication_Kind}.String()
	Replication_KindAPIVersion   = Replication_Kind + "." + CRDGroupVersion.String()
	Replication_GroupVersionKind = CRDGroupVersion.WithKind(Replication_Kind)
)

func init() {
	SchemeBuilder.Register(&Replication{}, &ReplicationList{})
}
