/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScannerRegistrationInitParameters struct {

	// (String) An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
	AccessCredential *string `json:"accessCredential,omitempty" tf:"access_credential,omitempty"`

	// (String) Specify what authentication approach is adopted for the HTTP communications. Supported types: "Basic", "Bearer", "X-ScannerAdapter-API-Key"
	Auth *string `json:"auth,omitempty" tf:"auth,omitempty"`

	// (String) An optional description of this registration.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of this registration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) A base URL of the scanner adapter.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ScannerRegistrationObservation struct {

	// (String) An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
	AccessCredential *string `json:"accessCredential,omitempty" tf:"access_credential,omitempty"`

	// (String) Specify what authentication approach is adopted for the HTTP communications. Supported types: "Basic", "Bearer", "X-ScannerAdapter-API-Key"
	Auth *string `json:"auth,omitempty" tf:"auth,omitempty"`

	// (String) The date and time the scanner registration was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// (String) An optional description of this registration.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Unique identifier of the scanner registration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of this registration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) A base URL of the scanner adapter.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The date and time the scanner registration was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// (String) The UUID of this scanner registration.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ScannerRegistrationParameters struct {

	// (String) An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
	// +kubebuilder:validation:Optional
	AccessCredential *string `json:"accessCredential,omitempty" tf:"access_credential,omitempty"`

	// (String) Specify what authentication approach is adopted for the HTTP communications. Supported types: "Basic", "Bearer", "X-ScannerAdapter-API-Key"
	// +kubebuilder:validation:Optional
	Auth *string `json:"auth,omitempty" tf:"auth,omitempty"`

	// (String) An optional description of this registration.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name of this registration
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) A base URL of the scanner adapter.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// ScannerRegistrationSpec defines the desired state of ScannerRegistration
type ScannerRegistrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScannerRegistrationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScannerRegistrationInitParameters `json:"initProvider,omitempty"`
}

// ScannerRegistrationStatus defines the observed state of ScannerRegistration.
type ScannerRegistrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScannerRegistrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:object:generate=true

// ScannerRegistration is the Schema for the ScannerRegistrations API. Provides a Harbor Scanner Registration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type ScannerRegistration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   ScannerRegistrationSpec   `json:"spec"`
	Status ScannerRegistrationStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:object:generate=true

// ScannerRegistrationList contains a list of ScannerRegistrations
type ScannerRegistrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScannerRegistration `json:"items"`
}

// Repository type metadata.
var (
	ScannerRegistration_Kind             = "ScannerRegistration"
	ScannerRegistration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScannerRegistration_Kind}
	ScannerRegistration_KindAPIVersion   = ScannerRegistration_Kind + "." + CRDGroupVersion.String()
	ScannerRegistration_GroupVersionKind = CRDGroupVersion.WithKind(ScannerRegistration_Kind)
)

func init() {
	SchemeBuilder.Register(&ScannerRegistration{}, &ScannerRegistrationList{})
}