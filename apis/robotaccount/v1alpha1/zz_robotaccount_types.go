/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type AccessObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type AccessParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource" tf:"resource,omitempty"`
}

type PermissionsInitParameters struct {
	Access []AccessInitParameters `json:"access,omitempty" tf:"access,omitempty"`

	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// +crossplane:generate:reference:type=github.com/rossigee/provider-harbor/apis/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Reference to a Project in project to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceRef *v1.Reference `json:"namespaceRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceSelector *v1.Selector `json:"namespaceSelector,omitempty" tf:"-"`
}

type PermissionsObservation struct {
	Access []AccessObservation `json:"access,omitempty" tf:"access,omitempty"`

	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type PermissionsParameters struct {

	// +kubebuilder:validation:Optional
	Access []AccessParameters `json:"access" tf:"access,omitempty"`

	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// +crossplane:generate:reference:type=github.com/rossigee/provider-harbor/apis/project/v1alpha1.Project
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",true)
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Reference to a Project in project to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceRef *v1.Reference `json:"namespaceRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate namespace.
	// +kubebuilder:validation:Optional
	NamespaceSelector *v1.Selector `json:"namespaceSelector,omitempty" tf:"-"`
}

type RobotAccountInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Permissions []PermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`
}

type RobotAccountObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Permissions []PermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	RobotID *string `json:"robotId,omitempty" tf:"robot_id,omitempty"`
}

type RobotAccountParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`
}

// RobotAccountSpec defines the desired state of RobotAccount
type RobotAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RobotAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RobotAccountInitParameters `json:"initProvider,omitempty"`
}

// RobotAccountStatus defines the observed state of RobotAccount.
type RobotAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RobotAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RobotAccount is the Schema for the RobotAccounts API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harbor}
type RobotAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.level) || (has(self.initProvider) && has(self.initProvider.level))",message="spec.forProvider.level is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	Spec   RobotAccountSpec   `json:"spec"`
	Status RobotAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RobotAccountList contains a list of RobotAccounts
type RobotAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RobotAccount `json:"items"`
}

// Repository type metadata.
var (
	RobotAccount_Kind             = "RobotAccount"
	RobotAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RobotAccount_Kind}.String()
	RobotAccount_KindAPIVersion   = RobotAccount_Kind + "." + CRDGroupVersion.String()
	RobotAccount_GroupVersionKind = CRDGroupVersion.WithKind(RobotAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&RobotAccount{}, &RobotAccountList{})
}
